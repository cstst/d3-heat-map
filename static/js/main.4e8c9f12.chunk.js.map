{"version":3,"sources":["components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["Graph","fetch","then","res","json","data","console","log","this","drawHeatMap","monthlyVariance","_ref","baseTemperature","margin","years","map","yearData","year","temps","variance","svg","d3","append","attr","xScale","domain","range","yScale","colorScale","monthScale","xAxis","tickValues","tickFormat","yAxis","d","tooltip","selectAll","enter","month","style","on","i","text","concat","Math","round","pageY","pageX","call","width","tempDif","tempTicks","push","react_default","a","createElement","id","Component","App","Graph_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e8c9f12.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default class Graph extends Component {\r\n  async componentDidMount() {\r\n    const data = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json')\r\n      .then(res => res.json())\r\n    console.log(data);\r\n    this.drawHeatMap(data);\r\n  }\r\n\r\n  drawHeatMap({ monthlyVariance, baseTemperature }) {\r\n    const height = 600,\r\n          width = 1500,\r\n          margin = {top: 60, right: 30, bottom: 100, left: 60},\r\n          years = monthlyVariance.map(yearData => yearData.year),\r\n          temps = monthlyVariance.map(yearData => yearData.variance),\r\n          svg = d3.select('#graph')\r\n                  .append('svg')\r\n                  .attr('height', height)\r\n                  .attr('width', width),\r\n          xScale = d3.scaleLinear()\r\n                     .domain([d3.min(years), d3.max(years)])\r\n                     .range([margin.left, width - margin.right]),\r\n          yScale = d3.scaleLinear()\r\n                     .domain([1, 13])\r\n                     .range([margin.top, height - margin.bottom]),\r\n          colorScale = d3.scaleQuantize()\r\n                     .domain([d3.min(temps), d3.max(temps)])\r\n                     .range([\"#5E4FA2\", \"#3288BD\", \"#66C2A5\", \"#ABDDA4\", \"#E6F598\", \"#FFFFBF\", \"#FEE08B\", \"#FDAE61\", \"#F46D43\", \"#D53E4F\", \"#9E0142\"]),\r\n          monthScale = d3.scaleQuantize()\r\n                          .domain([1, 13])\r\n                          .range(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', '']),\r\n          xAxis = d3.axisBottom(xScale)\r\n                    .tickValues(d3.range(1760, 2015, 10))\r\n                    .tickFormat(d3.format('d')),\r\n          yAxis = d3.axisLeft(yScale)\r\n                    .tickFormat(d => monthScale(d)),\r\n          tooltip = d3.select(\"#graph\")\r\n                      .append(\"div\")\r\n                      .attr(\"id\", \"tooltip\")\r\n\r\n    svg.selectAll('rect')\r\n       .data(monthlyVariance)\r\n       .enter()\r\n       .append('rect')\r\n       .attr('class', 'rect')\r\n       .attr('height', (height - (margin.top + margin.bottom)) / 12)\r\n       .attr('width', width / (d3.max(years) - d3.min(years)))\r\n       .attr('x', d => xScale(d.year))\r\n       .attr('y', d => yScale(d.month))\r\n       .attr('month', d => monthScale(d.month))\r\n       .style('fill', d => colorScale(d.variance))\r\n       .on('mouseover', (d, i) => {\r\n          tooltip.text(`${monthScale(d.month)} ${d.year}\\n${(Math.round((baseTemperature + d.variance) * 10) / 10)}℃\\n${(Math.round(d.variance * 10) / 10)}℃`)\r\n                 .style(\"visibility\", \"visible\")\r\n        })\r\n      .on(\"mousemove\", () => {\r\n        tooltip.style(\"top\", (d3.event.pageY - 100)+\"px\")\r\n               .style(\"left\",(d3.event.pageX - 40)+\"px\");\r\n      })\r\n      .on(\"mouseout\", () => {\r\n        tooltip.style(\"visibility\", \"hidden\")\r\n      });\r\n\r\n    svg.append('g')\r\n       .attr('id', 'y-axis')\r\n       .attr('transform', `translate(${margin.left}, 0)`)\r\n       .call(yAxis);\r\n       \r\n    svg.append('g')\r\n       .attr('transform', `translate(0, ${height - margin.bottom})`)\r\n       .attr('id', 'x-axis')\r\n       .call(xAxis);\r\n\r\n    svg.append('text')\r\n       .attr('x', width / 3)\r\n       .attr('y', margin.top / 2)\r\n       .attr('id', 'title')\r\n       .text('Monthly Global Land-Surface Temperature')\r\n    \r\n    svg.append('text')\r\n       .attr('x', (width / 3) + 60)\r\n       .attr('y', margin.top / 1.2)\r\n       .attr('id', 'subtitle')\r\n       .text('1753-2015: Base Temperature 8.66℃');\r\n      \r\n    const tempDif = (d3.max(temps) - d3.min(temps)) / 12,\r\n          tempTicks = [];\r\n    for (let i = 0; i < 12; i++) {\r\n      tempTicks.push(d3.min(temps) + tempDif * i)\r\n    }\r\n    console.log(tempTicks)\r\n    const legend = svg.selectAll('.legend')\r\n       .data(tempTicks)\r\n       .enter()\r\n       .append('g')\r\n       .attr('class', 'legend')\r\n       .attr('id', 'legend')\r\n       .attr('transform', (d, i) => `translate(${i * 30}, 0)`);\r\n\r\n    legend.append('rect')\r\n          .attr('x', margin.left)\r\n          .attr('y', height - (margin.bottom / 2))\r\n          .attr('class', 'legend-rect')\r\n          .attr('width', 30)\r\n          .attr('height', 30)\r\n          .style('fill', d => colorScale(d));\r\n/*\r\n    legend.append('text')\r\n          .attr('x', width - 24)\r\n          .attr('y', 9)\r\n          .attr('dy', '.35em')\r\n          .style('text-anchor', 'end')\r\n          .text(d => d ? 'Riders with doping allegations' : 'No doping allegations');\r\n  */                \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id=\"graph\">\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Graph from './components/Graph';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n       <Graph />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}