{"version":3,"sources":["components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["Graph","fetch","then","res","json","data","this","drawHeatMap","monthlyVariance","_ref","baseTemperature","margin","svg","d3","append","attr","years","map","yearData","year","temps","variance","tempDif","xScale","domain","range","yScale","colorScale","monthScale","cellHeight","cellWidth","tooltip","selectAll","enter","d","month","style","on","i","text","concat","Math","round","pageY","pageX","yAxisScale","yAxis","tickSizeOuter","tickFormat","call","height","xAxis","tickValues","width","legend","legendColorVals","push","legendTickVals","legendScale","length","legendAxis","n","react_default","a","createElement","id","Component","App","Graph_Graph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.675a1349.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default class Graph extends Component {\r\n  async componentDidMount() {\r\n    const data = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json')\r\n      .then(res => res.json())\r\n    this.drawHeatMap(data);\r\n  }\r\n\r\n  drawHeatMap({ monthlyVariance, baseTemperature }) {\r\n    const height = 600;\r\n    const width = 1500;\r\n    const margin = { top: 60, right: 30, bottom: 140, left: 120 };\r\n\r\n    const svg = d3.select('#graph')\r\n                  .append('svg')\r\n                  .attr('height', height)\r\n                  .attr('width', width);\r\n\r\n    const years = monthlyVariance.map(yearData => yearData.year);\r\n    const temps = monthlyVariance.map(yearData => yearData.variance);\r\n    const tempDif = (d3.max(temps) - d3.min(temps)) / 11;\r\n\r\n    const xScale = d3.scaleLinear()\r\n                     .domain([d3.min(years), d3.max(years)])\r\n                     .range([margin.left, width - margin.right]);\r\n\r\n    const yScale = d3.scaleLinear()\r\n                     .domain([1, 13])\r\n                     .range([margin.top, height - margin.bottom]);\r\n     \r\n    const colors = [\r\n      \"#5E4FA2\", \r\n      \"#3288BD\", \r\n      \"#66C2A5\", \r\n      \"#ABDDA4\", \r\n      \"#E6F598\", \r\n      \"#FFFFBF\", \r\n      \"#FEE08B\", \r\n      \"#FDAE61\", \r\n      \"#F46D43\", \r\n      \"#D53E4F\", \r\n      \"#9E0142\"\r\n    ];                 \r\n    const colorScale = d3.scaleQuantize()\r\n                     .domain([d3.min(temps), d3.max(temps)])\r\n                     .range(colors);\r\n\r\n    const months = [\r\n      'January', \r\n      'February', \r\n      'March', \r\n      'April', \r\n      'May', \r\n      'June', \r\n      'July', \r\n      'August', \r\n      'September', \r\n      'October', \r\n      'November', \r\n      'December'\r\n    ];                 \r\n    const monthScale = d3.scaleQuantize()\r\n                          .domain([1, 12])\r\n                          .range(months);\r\n                    \r\n    const cellHeight = (height - (margin.top + margin.bottom)) / 12;\r\n    const cellWidth =  (width - (margin.left + margin.right)) / (d3.max(years) - d3.min(years));\r\n\r\n    const tooltip = d3.select(\"#graph\")\r\n                      .append(\"div\")\r\n                      .attr(\"id\", \"tooltip\");        \r\n\r\n    svg.selectAll('rect')\r\n       .data(monthlyVariance)\r\n       .enter()\r\n       .append('rect')\r\n       .attr('class', 'cell')\r\n       .attr('height', cellHeight)\r\n       .attr('width',cellWidth)\r\n       .attr('x', d => xScale(d.year))\r\n       .attr('y', d => yScale(d.month))\r\n       .attr('data-month', d => d.month)\r\n       .attr('data-year', d => d.year)\r\n       .attr('data-temp', d => d.variance + baseTemperature)\r\n       .style('fill', d => colorScale(d.variance))\r\n       .on('mouseover', (d, i) => {\r\n          tooltip.text(`${monthScale(d.month)} ${d.year}\\n${(Math.round((baseTemperature + d.variance) * 10) / 10)}°C\\n${d.variance > 0 ? '+' : ''}${(Math.round(d.variance * 10) / 10)}°C`)\r\n                 .attr('data-year', d.year)\r\n                 .style(\"visibility\", \"visible\")\r\n        })\r\n        .on(\"mousemove\", () => {\r\n          tooltip.style(\"top\", (d3.event.pageY - 100)+\"px\")\r\n                 .style(\"left\",(d3.event.pageX - 40)+\"px\");\r\n        })\r\n        .on(\"mouseout\", () => {\r\n          tooltip.style(\"visibility\", \"hidden\")\r\n        });\r\n\r\n    const yAxisScale = d3.scaleLinear()\r\n                         .domain([.5, 12.5])\r\n                         .range([margin.top, height - margin.bottom]);\r\n\r\n    const yAxis = d3.axisLeft(yAxisScale)\r\n                    .tickSizeOuter(0)\r\n                    .tickFormat(d => monthScale(d));\r\n\r\n    svg.append('g')\r\n       .attr('id', 'y-axis')\r\n       .attr('transform', `translate(${margin.left}, 0)`)\r\n       .call(yAxis);\r\n       \r\n    svg.append(\"text\")\r\n       .attr('id', 'y-axis-label')\r\n       .attr(\"transform\", \"rotate(-90)\")\r\n       .attr(\"x\", (height / 2) * -1)\r\n       .attr(\"y\", margin.left / 2)\r\n       .text(\"Month\")\r\n       \r\n    const xAxis = d3.axisBottom(xScale)\r\n                    .tickValues(d3.range(1760, 2015, 10))\r\n                    .tickSizeOuter(0)\r\n                    .tickFormat(d3.format('d'));   \r\n\r\n    svg.append('g')\r\n       .attr('id', 'x-axis')\r\n       .attr('transform', `translate(0, ${height - margin.bottom})`)\r\n       .call(xAxis);\r\n\r\n    svg.append(\"text\")\r\n       .attr('id', 'x-axis-label')\r\n       .attr(\"x\", width / 2)\r\n       .attr(\"y\", height - (margin.bottom / 1.5))\r\n       .text(\"Year\") \r\n\r\n    svg.append('text')\r\n       .attr('id', 'title')\r\n       .attr('x', width / 2)\r\n       .attr('y', margin.top / 2)\r\n       .style(\"text-anchor\", \"middle\")\r\n       .text('Monthly Global Land-Surface Temperature')\r\n    \r\n    svg.append('text')\r\n       .attr('id', 'description')\r\n       .attr('x', (width / 2))\r\n       .attr('y', margin.top / 1.2)\r\n       .style(\"text-anchor\", \"middle\")\r\n       .text('1753-2015: Base Temperature 8.66°C');\r\n       \r\n    const legend = svg.append('g')\r\n                      .attr('id', 'legend')\r\n\r\n    const legendColorVals = [];\r\n    for (let i = 0; i < 11; i++) {\r\n      legendColorVals.push(d3.min(temps) + ((tempDif * i) + (tempDif / 2)));\r\n    }\r\n\r\n    legend.selectAll('rect')\r\n          .data(legendColorVals)\r\n          .enter()\r\n          .append('rect')\r\n          .attr('x', (d, i) => margin.left + (40 * i))\r\n          .attr('y', height - (margin.bottom / 1.5))\r\n          .attr('val', d => d)\r\n          .attr('class', 'legend-cell')\r\n          .attr('width', 40)\r\n          .attr('height', 40)\r\n          .style('fill', d => colorScale(d));\r\n\r\n    const legendTickVals = []\r\n    for (let i = 1; i < 11; i++) {\r\n      legendTickVals.push(d3.min(temps) + (tempDif * i));\r\n    }\r\n    \r\n    const legendScale = d3.scaleLinear()\r\n                          .domain([legendTickVals[0], legendTickVals[legendTickVals.length - 1]])\r\n                          .range([margin.left + 39, margin.left + 399]);\r\n\r\n    const legendAxis = d3.axisBottom(legendScale)\r\n                         .tickValues(legendTickVals)\r\n                         .tickFormat( n => (n > 0 ? '+' : '') + (Math.round(n * 10) / 10));    \r\n    legend.append(\"g\")\r\n          .attr('id', 'legend-axis')\r\n          .attr(\"transform\", `translate(0, ${height - (margin.bottom / 1.5) + 39})`)\r\n          .call(legendAxis);\r\n\r\n    legend.append(\"text\")\r\n          .attr('id', 'legend-axis-label')\r\n          .attr(\"x\", margin.left + 220)\r\n          .attr(\"y\", height - (margin.bottom / 1.5) + 80)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(\"Variance from Base Temperature (°C)\")\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id=\"graph\" />\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Graph from './components/Graph';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n       <Graph />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}